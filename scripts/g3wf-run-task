#!/bin/bash

# g3wf-run-task
#
# David Adams
# November 2023
#
# This command is intended to be prepended to the command running an LSST task.
# It provides options to monitor and change the scheduling of that task.

######### Functions ########

# Start process for a command and stop it immediately.
# The command will be started when signal CONT is set to the process.
runcom() {
  MYPID=$BASHPID
  kill -SIGSTOP $MYPID
  exec $@
}

# Return the state for a process.
#  R - Running
#  S - Interruptible sleep.
#  T - Stopped.
#  D - Uninterruptible sleep.
#  Z - Zombie.
procstate() {
  ps -o state= -p $1
}

# Return the context switches for a process.
# Format: Involuntary voluntary
get-ctxt() {
  VALS=
  PROCID=$1
  FNAM=/proc/$PROCID/status
  for NAM in nonvoluntary_ctxt_switches voluntary_ctxt_switches; do
    if VAL=$(grep ^$NAM: $FNAM 2>/dev/null | sed "s/$NAM: *//g"); then
      if [ -z "$VALS" ]; then
        VALS=$VAL
      else
        VALS="$VALS $VAL"
      fi
    else
      break
    fi
  done
  echo $VALS
}

# Return the CPU number and affinity for a process.
# Format: CPU-number affinity
get-cpunum() {
  PROCID=$1
  FNAM=/proc/$PROCID/stat
  if PROCS=($(cat $FNAM 2>/dev/null)); then
    CPU=${PROCS[38]}
    AFF=$(taskset -cp $PROCID 2>/dev/null | sed 's/.*: *//g')
    echo $CPU $AFF
  fi
}

# Return time stamp seconds.nanoseconds
tstamp() {
  date +%s.%N
}

# Run command CCC every TTT seconds
# Usage: monloop TTT CCC
monloop() {
  local T0=0
  if [ $T0 = 0 ]; then
    T0=$(tstamp)
  fi
  LAB=$1
  shift
  SLP=$1
  shift
  LCOM="$*"
  TMPFIL=${LAB}$BASHPID.tmp
  rm -f $TMPFIL
  while true; do
    TIM=$(tstamp)
    DTIM=$(echo $TIM - $T0 | bc -l)
    FTIM="$(printf "%10.3f" $DTIM)"
    $LCOM 2>&1 >>$TMPFIL
    sed -i "s/^/$LAB[$FTIM]: /g" $TMPFIL
    cat $TMPFIL >&2
    rm -f $TMPFIL
    STIM=$(echo $TIM - $(tstamp) + $SLP| bc -l)
    if [ ${STIM:0:1} != - ]; then sleep $STIM; fi
  done
}

# Display a message line with prefix.
DBG=0
msgecho() {
  echo "<<<<<$(date)>>>>> $*"
  return 0
}

# Display a line if the debug flag is set.
DBG=0
dbgecho() {
  if [ $DBG -gt 0 ]; then
    msgecho "$*"
    return 0
  fi
  return 1
}

show-help() {
  echo Usage: $(basename $0) [OPT1 OPT2 ...] COM
  echo "  COM is the run command"
  echo "  OPTi is any of"
  echo "    --verbose: Enable verbose logging"
  echo "      --norun: Do not run user or monitor commands"
  echo "      -t TSAM: Set sampling period to TSAM seconds (0 to disable)"
  echo "       --date: Monitor date and time."
  echo "         --ps: Monitor user process."
  echo "     --pstree: Monitor user process tree."
  echo "      --wtree: Monitor process tree for this script."
  echo "   --procstat: Monitor status for the run process (/proc/PID/stat)."
  echo "     --cpunum: Monitor CPU number and affinity for the run process."
  echo "    --iotrace: Run iotrace on the task process. Output in BASE.iotrace"
  echo "  --perfstat1: Prppend the task process with \"perf stat -d\"."
  echo "  --perfstat2: Run \"perf stat -d\" on the task process. Output in BASE.perfstat"
  echo "   --perfstat: Same as perfstat2."
  echo "All monitoring commands are run every TSAM seconds with that period"
  echo "in seconds set to 10 or the preceding -t value."
  echo "All output lines for monitor flag --FFF begin with \"FFF[ TTT]: \""
  echo "where TTT is the time in seconds since the monitor was started."
  echo "Task log file is BASE.stderr with BASE assigned by parsl."
}

########## End functions. #########

TSTART=$(date +%s.%N)
TASKLOG=$(g3wf-get-stderr)
LOGBASE=$(echo $TASKLOG | sed 's/\.stderr$//g')
TWRAPLOG=$LOGBASE.tasklog

{ # Begin redirected stdout,stderr

msgecho Begin task wrapper
msgecho Log base is $LOGBASE
msgecho Task log is $TASKLOG
msgecho Task wrapper log is $TWRAPLOG

# Read the command line.
TSAM=10
MCOMS=()
MPIDS=()
RUNPFX="time"
NORUN=0
DOIOTRACE=no
DOPERFSTAT=no
while [ $# -gt 0 ]; do
  ARG=$1
  if [ ${ARG:0:1} != "-" ]; then
    break
  fi
  shift
  dbgecho Processing flag $ARG
  if [ $ARG = --verbose ]; then
    DBG=1
  elif [ $ARG = -h -o $ARG = --help ]; then
    show-help
    exit 0
  elif [ $ARG = --norun ]; then
    NORUN=1
  elif [ $ARG = -t ]; then
    TSAM=$1
    shift
  elif [ $ARG = -m ]; then
    ARG=$1
    shift
    MCOMS+=("$ARG")
  elif [ $ARG = --date ]; then
    MCOMS+=("monloop date $TSAM date")
  elif [ $ARG = --ps ]; then
    MCOMS+=("monloop ps $TSAM ps -f #PID#")
  elif [ $ARG = --pstree ]; then
    MCOMS+=("monloop pstree $TSAM pstree -pg #PID#")
  elif [ $ARG = --wtree ]; then
    MCOMS+=("monloop wtree $TSAM pstree -pg $BASHPID")
  elif [ $ARG = --procstat ]; then
    MCOMS+=("monloop procstat $TSAM cat /proc/#PID#/stat")
  elif [ $ARG = --procctxt ]; then
    MCOMS+=("monloop procctxt $TSAM get-ctxt #PID#")
  elif [ $ARG = --cpunum ]; then
    MCOMS+=("monloop cpunum $TSAM get-cpunum #PID#")
  elif [ $ARG = --iotrace ]; then
    DOIOTRACE=yes
  elif [ $ARG = --perfstat1 ]; then
    RUNPFX="time perf stat -d"
  elif [ $ARG = --perfstat2 -o $ARG = --perfstat ]; then
    DOPERFSTAT=yes
  else
    msgecho "ERROR: Invalid flag: $ARG"
    exit 1
  fi
done
RUNCOM="$*"
if [ -z "$RUNCOM" ]; then
  msgecho ERROR: Run command not found.
  exit 1
fi
if [ -n "$RUNPFX" ]; then
  RUNCOM="$RUNPFX $RUNCOM"
fi
} >>$TWRAPLOG 2>&1 # End redirected stdout,stderr

# Create a stopped process that will exec the user command
# when it is restarted.
(runcom "$RUNCOM") &
COMPID=$!

{ # Begin redirected stdout,stderr
dbgecho Command pid is $COMPID
# Wait for the user process to stop.
while [ $(procstate $COMPID) != T ]; do
  dbgecho "Waiting for command process $COMPID to be ready."
  sleep 1
done

dbgecho DEBUG is on
dbgecho Script pid is $BASHPID
dbgecho User command: $RUNCOM

NMCOM=${#MCOMS[@]}
if [ $NMCOM -gt 0 ]; then
  dbgecho Monitor commands [$NMCOM]:
  for IMCOM in "${!MCOMS[@]}"; do
      MCOM=${MCOMS[$IMCOM]}
      MCOM=$(echo $MCOM | sed "s/#PID#/$COMPID/g")
      SUFF=$(echo ${MCOM:7} | sed 's/ .*//g')
      MONILOG=$LOGBASE.$SUFF
      dbgecho "  $MCOM"
      if [ $NORUN -eq 0 ]; then
        $MCOM >$MONILOG 2>&1 &
        MPID=$!
        if ps $MPID 2>&1 1>/dev/null; then
          MPIDS+=($MPID)
          msgecho Started monitoring process $MPID: $MCOM
          msgecho Output: $MONILOG
        else
          msgecho "Unable to start monitoring command: $MCOM"
        fi
      fi
  done
else
  dbgecho No monitor commands.
fi
if [ $DBG -gt 1 ]; then exit 0; fi

if [ $DOIOTRACE = yes ]; then
  msgecho "Starting iotrace for process $COMPID"
  iotrace -f -p $COMPID -report $LOGBASE.iotrace 1>$LOGBASE.iotrace.stdout 2>&1 &
fi

if [ $DOPERFSTAT = yes ]; then
  msgecho "Starting perf stat for process $COMPID"
  perf stat -d -p $COMPID -o $LOGBASE.perfstat 2>&1 1>$LOGBASE.perfstat.stdout &
fi

if [ $DBG -gt 0 ]; then
  dbgecho  Displaying process $COMPID
  ps -f $COMPID
fi

# Start the monitor commands.
if [ $NORUN -eq 0 ]; then
  NRPRE=
else
  NRPRE="NOT "
fi

# Start the process.
dbgecho ${NRPRE}Starting process $COMPID
msgecho Starting command process $COMPID: $RUNCOM
if [ $NORUN -eq 0 ]; then
  kill -CONT $COMPID
  msgecho "Waiting for command process $COMPID to end."
  wait $COMPID
  msgecho Command process ended.
else
  kill -STOP $COMPID
fi
msgecho Killing monitor processes.
for MPID in "${MPIDS[@]}"; do
  if ps $MPID 2>&1 1>/dev/null; then
    msgecho Killing monitoring process $MPID.
    kill $MPID
  else
    msgecho "Unable to find and so not killing monitoring process $MPID."
  fi
done
msgecho End task wrapper
} >>$TWRAPLOG 2>&1 # End redirected stdout,stderr
