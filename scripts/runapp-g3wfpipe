#!/bin/bash

# runapp-g3wfpipe
#
# David Adams
# May 2023
# Run a DESC gen3 pipeline processing job.
# This script is called without two arguments config and howfig, each of which is split
# '-' as a separator to obtain the configuration fields NAM:VAL or NAM:VAL1:VAL2
# Config fields:
#   pipe: Specifies the processing tasks. See PIPEVAL below. E.g. isr, ccd, drp, ...
#   wYYWW: Use LSST release w_20YY_WW
#   The query for which data to process is and of one or more of the following:
#     visit: Which visits to process. Either VAL or [VAL1,VAL2]
#     tract: Which tracts to process. Either VAL or [VAL1,VAL2]
#     patch: Which patches to process. Either VAL or [VAL1,VAL2]
# Howfig fields:
#   exec: Parsl executor wq, ht or tp.
#   code source: cvmfs or shifter
#   time limit: tmax:TT where TT is time limit in sec or
#   memory limit [GB]: memMMM

if [[ -z $1 || $1 = -h ]]; then
  echo Usage: $0 CFG [HFG]
  echo CFG = CF1-CF2-... where CFi is any of
  echo "  pipe:PIPELINE, e.g. pipe:isr"
  echo "  visit:NNN: Visit for query e.g. visit:123456"
  echo "  tract:NNN: Tract for query e.g. tract:4248"
  echo "  patch:NNN: Patch for query e.g. patch:85"
  echo "  wYYWW: Use LSSST release w_20YY_WW"
  echo "  init: Initialize (create DAG)."
  echo "  proc: Run the tasks."
  echo "  finalize: Finalize (register output data products)."
  echo "  status: Display processing status."
  echo "  butler: Run test of the Butler."
  echo "  usuf:USUF: Append -USUF to the user name for data output."
  echo "  pmsXXX: Append -pmsXXX to the user name for data output."
  echo "  cfsXXX: Append -cfsXXX to the user name for data output."
  echo HFG = HF1-HF2-... where HFi is any of
  echo "  exec:XX where XX = wq (XX is GB memory) or tp (XX is process count)"
  echo "  rebuild: Rebuild the SW cache (cvmfs only)."
  echo "  cvmfs: Code taken from default env using LSST cvmfs"
  echo "  cvmfs:BBB: Code taken from env option BBB using LSST cvmfs code"
  echo "  shifter: Code taken from shifter"
  echo "  shifter:VV: Code taken from shifter env version VV"
  echo "  tmax:TMAX Timeout TMAX in with unit {s, m, h}"
  echo "  tmax:TMAX1:TMAX2:...: Stage timeouts for multistage jobs"
  echo "  pmon:DT Sampling time for the parsl process monitor is DT sec."
  echo "          DT = false or 0 disables monitoring. Default is 3."
  echo "  bproc:BPO: Run pre,proc,post multistage with proc in pmbs-BPO"
  echo "    Options BPO are those for pmbs here colon separated."
  echo "  repo:RRR - Use repo at $HOME/scratch/repo-RRR."
  echo "  strace: Run strace with trace=file for each task."
  echo "  strace:fileI: Run strace with selected file calls. I in {1,2,3}"
  echo "  strace:V1:V2:...: Run strace with trace=V1,V2,... for each task."
  echo "  strace:nNN:...: Strace is only run for 1/NN of the tasks."
  echo "  stime: Create an strace system time summary."
  echo "DC2 data is processed and output data is written to"
  echo "  /global/cfs/cdirs/lsst/production/gen3/DC2/Run2.2i/repo/u/UOUT"
  echo "where UOUT is USER where USER is user name"
  echo "or USER-USUF if the usuf option is used above."
  exit 1
fi

DBG=0
SFIL=current-status.txt
LFIL=debug-g3wfpipe.log

err_echo() {
  MSG="$*"
  echo "$MSG" >$SFIL
  echo "ERROR: $MSG" >&2
  echo "ERROR: $MSG" >>$LFIL
}

info_echo() {
  MSG="$*"
  echo "$MSG" >$SFIL
  echo "INFO: $MSG" >&2
  echo "INFO: $MSG" >>$LFIL
}

dbg_echo() {
  if [ $DBG -gt 0 ]; then
    echo $*
  fi
}

decode_query() {
  VALS=(${1//:/ })
  NAM=${VALS[0]}
  VAL1=${VALS[1]}
  VAL2=${VALS[2]}
  VAL3=${VALS[3]}
  if [ -z "$VAL1" -o -n "$VAL3" ]; then
    err_echo Invalid query field: $1
    exit 2
  fi
  if [ -n "$VAL2" ]; then
    echo "$NAM in ($VAL1..$VAL2)"
  else
    echo "$NAM=$VAL1"
  fi
}

info_echo Running app g3wfpipe
CFG=$1
HFG=$2
COPTS=(${CFG//-/ })
HOPTS=(${HFG//-/ })

# We use extended globbing below.
shopt -s extglob

# Parse the config.
PIPE=
QUERY=
LVEROPTS=
CJOB=
DOINIT=false
WFARGS_ARR=()
USER=$(whoami)
USUF=
DRP_INGDIR=pipelines/_ingredients  # w2321 and later
for OPT in ${COPTS[@]}; do
  dbg_echo Parsing option $OPT
  OPTNAME=$(echo $OPT | cut -d':' -f1)
  OPTARGS=$(echo $OPT | cut -d':' -f2-)
  if [ $OPTNAME == init ]; then
    DOINIT=true
    WFARGS_ARR+=($OPTNAME)
  elif [ $OPTNAME = job ]; then
    CJOB=$OPTARGS
  elif [[ $OPTNAME = proc ]]; then
    WFARGS_ARR+=($OPTNAME)
  elif [ $OPTNAME == finalize ]; then
    WFARGS_ARR+=($OPTNAME)
  elif [ $OPTNAME == qgre ]; then
    WFARGS_ARR+=($OPTNAME)
  elif [ $OPTNAME == butler ]; then
    WFARGS_ARR+=($OPTNAME)
  elif [ $OPTNAME == status ]; then
    WFARGS_ARR+=($OPTNAME)
  elif [ $OPT == tables ]; then
    WFARGS_ARR+=($OPTNAME)
  elif [ $OPTNAME = pipe ]; then
    if [ -n "$PIPE" ]; then
      err_echo ERROR: Duplicate pipeline specification: $PIPE $OPT
      exit 1
    fi
    PIPE=$OPTARGS
  elif [ $OPTNAME = visit -o $OPTNAME = tract -o $OPTNAME = patch ]; then
    NEWQUERY=$(decode_query $OPT)
    if [ -n "$QUERY" ]; then
      QUERY="$QUERY and $NEWQUERY"
    else
      QUERY="$NEWQUERY"
    fi
  elif [ $OPTNAME = usuf ]; then
    USUF=$OPTARGS
  elif [ ${OPTNAME:0:3} = cfs -o ${OPTNAME:0:3} = pms ]; then
    USUF=$OPTNAME
  else
    LVER=$(g3wf-convert-lsst-version $OPTNAME)
    if [ -z "$LVER" ]; then
      err_echo ERROR: Invalid config field: $OPT
      exit 3
    fi
    IVER=${OPTNAME:1}
    if [ $IVER -le 2319 ]; then
      DRP_INGDIR=ingredients
    fi
    LVEROPTS=$OPT
  fi
done

if [[ -z $CJOB ]]; then
  BADRELS="2330 2331"
  if echo " $BADRELS " | grep " $IVER "; then
    err_echo "ERROR: DESC parsl cannot (yet) be installed for $LVER."
    exit 22
  fi
fi

CSRC=
NNOD=1
EXEC=none
if [[ -n $CJOB ]]; then
  if [[ -n $QUERY ]]; then
    err_echo "uery may not be specified for a continuation job."
    exit 1
  fi
  if [[ -n $PIPE ]]; then
    err_echo "ipeline may not be specified for a continuation job."
    exit 1
  fi
  if [[ -n $LVEROPTS ]]; then
    err_echo "The LSST release may not be specified for a continuation job."
    exit 1
  fi
  info_echo "Connecting to job $CJOB."
  if ! PDIR=$(descprod-get-job $CJOB | grep rundir: | sed 's/ *rundir: //g'); then
    err_echo "Unable to find continuation job $CJOB"
    exit 1
  fi
  if [ -z "$PDIR" ]; then
    err_echo "Unable to find name of run directory for continuation job $CJOB"
    exit 1
  fi
  if [ ! -r "$PDIR" ]; then
    err_echo "For job $CJOB, unable to find continuation run directory $PDIR"
    exit 1
  fi
  # Optional sources.
  for FIL in config.yaml submit runinfo repos local; do
    SRCFIL=$PDIR/$FIL
    if [ -r $SRCFIL ]; then
      info_echo "Linking source $SRCFIL"
      if ! ln -s $SRCFIL .; then
        err_echo "Unable to link $SRCFIL to $(pwd)"
        exit 1
      fi
    else
      info_echo "Source not found: $SRCFIL"
    fi
  done
  # Read the old configuration.
  # This should define CON_LVER, CON_PIPEVAL, CON_QUERY, CON_CSRC, CON_PREPEND
  SUPFIL=$PDIR/consetup.sh
  if [ ! -r $SUPFIL ]; then
    info_echo "ERROR: Unable to find continuation source setup $SUPFIL"
    exit 1
  fi
  source $SUPFIL
  PIPE=$CON_PIPE
  QUERY=$CON_QUERY
  PREPEND="$CON_PREPEND"
  LVEROPTS=$CON_LVEROPTS
  if [[ -z $CSRC ]]; then
    CSRC=$CON_CSRC
  fi
fi

# Extract the list of processing steps.
WFARGS="${WFARGS_ARR[*]}"


# Parse the howfig.
BUTLER_DIR=/global/cfs/cdirs/lsst/production/gen3/DC2/Run2.2i/repo
TMAXS=()
NTMAX=0
TMAX=
TMAX2=
TMAX3=
PMONDT=${CON_PMONDT:-3}
STRACE=$CON_STRACE
REBUILD=false
for OPT in ${HOPTS[@]}; do
  info_echo Processing howfig opt $OPT
  if [ ${OPT:0:7} = shifter ]; then
    CSRC=$OPT
  elif [ ${OPT:0:5} = cvmfs ]; then
    CSRC=$OPT
  elif [ $OPT = rebuild ]; then
    REBUILD=true
  elif [ ${OPT:0:3} = wq: ]; then
    EXEC=$OPT
  elif [ ${OPT:0:3} = tp: ]; then
    EXEC=$OPT
  elif [ ${OPT:0:5} = pmon: ]; then
    PMONDT=${OPT:5}
  elif [ ${OPT:0:5} = tmax: ]; then
    IFS=':' read -ra TMAXS <<< "${OPT:5}"
    NTMAX=${#TMAXS}
    if [ $NTMAX = 0 ]; then
      err_echo Howfig field missing value: $OPT
      exit 12
    fi
    TMAX=${TMAXS[0]}
    if [ $NTMAX -ge 2 ]; then TMAX2=${TMAXS[1]}; fi
    if [ $NTMAX -ge 3 ]; then TMAX3=${TMAXS[2]}; fi
  elif [ ${OPT:0:6} = bproc: ]; then
    if ! echo $WFARGS | grep proc 1>/dev/null; then
      err_echo WFARGS: $WFARGS
      err_echo howfig bproc requires proc in config.
      exit 14
    fi
    BPROC=true
    # pmbs expects '-' (not ':') as separator.
    IFS=':' read -ra BPOPTARR <<<"${OPT:6}"
    BPJOB=        # If true, create a DESCprod job to submit
    BPOPTS=       # Arguments passed to pmbs
    for OPT in ${BPOPTARR[@]}; do
      if [ $OPT = job ]; then
        BPJOB=true
      elif [ -z "$BPOPTS" ]; then
        BPOPTS=$OPT
      else
        BPOPTS=$BPOPTS-$OPT
      fi
    done
    if [ -z "$BPOPTS" ]; then
      err_echo Batch options must be specified with bproc.
      exit 19
    fi
    WFARGS2=$(echo $WFARGS | sed 's/.*proc//g' | sed 's/^-//g')
    WFARGS=$(echo $WFARGS | sed 's/proc.*//g' | sed 's/-$//g')
  elif [ ${OPT:0:5} = repo: ]; then
    BUTLER_DIR=$SCRATCH/repo-${OPT:5}
    if [ ! -r $BUTLER_DIR ]; then
      err_echo Butler dir not found: $BUTLER_DIR
      exit 15
    fi
  elif [ ${OPT:0:7} = "strace:" -a ${#OPT} -gt 7 ]; then
    STRACE=${OPT:7}
  elif [ $OPT = strace ]; then
    STRACE=file2
  elif [ $OPT = stime ]; then
    STRACE=timesum
  else
    err_echo Invalid howfig field: $OPT
    exit 13
  fi
done

if [ $PMONDT != false ] && [ $PMONDT != $PMONDT ]; then
  err_echo Invalid parsl monitoring interval: $PMONDT
  exit 20
fi

# Define the task command prepend.
#PREPEND="iotrace -cmd time perf stat -d"
#PREPEND="time perf stat -d"
#PREPEND="perf stat -d"
PREPEND="g3wf-run-task --perfstat -t 60 --cpunum"
if [ -n "$STRACE" ]; then
  info_echo "Decoding STRACE = \"$STRACE\""
  #PREPEND="myiotrace $PREPEND"  # job000831
  #PREPEND="strace -o strace.log -e read,write,open,openat,close $PREPEND" # 832
  #PREPEND="strace -f -o strace.log -e read,write,open,openat,close $PREPEND"
  #PREPEND="g3wf-strace -f -e read,write,open,openat,close,rename,renameat,renameat2,link,linkat,unlink,unlinkat $PREPEND"
  STOPT=
  STIME=
  STFREQ=1
  VALS=($(echo $STRACE | tr ":" "\n" ))
  STVAL=
  for VAL in ${VALS[@]}; do
    if [ "${VAL:0:1}" = n ]; then
      STFREQ=${VAL:1}
      if ! [ "$STFREQ" -eq "$STFREQ" ] 2>/dev/null; then
        err_echo strace frequency must be a number: $VAL
        exit 14
      fi
    elif [ -z "$STVAL" ]; then
      STVAL=$VAL
    else
      STVAL=$STVAL,$VAL
    fi
  done
  if [ $STVAL = file1 ]; then
    STOPT="open,openat"
  elif [ $STVAL = file2 ]; then
    STOPT="open,openat,close,rename,renameat,renameat2,link,linkat,unlink,unlinkat"
  elif [ $STVAL = file3 ]; then
    STOPT="read,write,open,openat,close,rename,renameat,renameat2,link,linkat,unlink,unlinkat"
  elif [ $STVAL = timesum ]; then
    STIME=true
  else
    STOPT="trace=$STVAL"
  fi
  if [ -n "$STIME" ]; then
    info_echo "Tasks will be run with an strace time summary"
    PREPEND="g3wf-strace -f -c $PREPEND"
  else
    info_echo "Tasks will run strace with expression $STOPT"
    PREPEND="g3wf-strace --freq=$STFREQ --args=\"-t -T -C -f -e $STOPT\" $PREPEND"
  fi
fi
info_echo "Command prepend: \"$PREPEND\""

# Record the setup for continuation jobs.
info_echo Creating consetup.sh
echo "CON_CSRC=$CSRC" >consetup.sh
echo "CON_LVEROPTS=$LVEROPTS" >>consetup.sh
echo "CON_QUERY=\"$QUERY\"" >>consetup.sh
echo "CON_PREPEND=\"$PREPEND\"" >>consetup.sh
echo "CON_PIPE=$PIPE" >>consetup.sh
echo "CON_PMONDT=$PMONDT" >>consetup.sh
echo "CON_STRACE=$STRACE" >>consetup.sh

if [ $DOINIT = true ]; then
PIPEVAL=
  if [ -z "$PIPE" ]; then
    err_echo "Pipeline must be specified for initialization."
    exit 1
  fi
  if [[ -z $QUERY ]]; then
    err_echo "Query must be provided for initialization."
    exit 1
  fi
  if [ -z "$LVEROPTS" ]; then
    err_echo "LSST release must be provided for initialization."
    exit 1
  fi
  if [ $PIPE = drp ]; then
    PIPEVAL=
  elif [ $PIPE = sf ]; then
    PIPEVAL="detection,mergeDetections,deblend,measure,mergeMeasurements,forcedPhotCoadd,writeObjectTable,transformObjectTable,consolidateObjectTable"
  elif [ $PIPE = ccd ]; then
    PIPEVAL="isr,characterizeImage,calibrate"
  else
    PIPEVAL=$PIPE
  fi
  PIPEVALSPEC=
  if [ -n "$PIPEVAL" ]; then PIPEVALSPEC="#$PIPEVAL"; fi
  info_echo Pipeline: $PIPEVAL
  info_echo "    Query: $QUERY"
  info_echo " LSST release opts: $LVEROPTS"
  info_echo Creating config.yaml.
  UOUT=$USER
  if [ -n "$USUF" ]; then
    UOUT=$UOUT-$USUF
  fi
  DOUTDIR=$BUTLER_DIR/u/$UOUT
  if [ ! -r $DOUTDIR ]; then
    err_echo "Data output dir not found."
    info_echo "Please create $DOUTDIR"
    exit 1
  fi
  g3wfpipe-template \
    | sed s/%PAYLOAD%/$PIPE/g \
    | sed "s#%BUTLER_DIR%#$BUTLER_DIR#g" \
    | sed "s#%DRP_INGDIR%#$DRP_INGDIR#g" \
    | sed s/%PIPE%/$PIPEVALSPEC/g \
    | sed s/%QUERY%/"$QUERY"/g \
    | sed s/%MEM%/$MEGB/g \
    | sed s/%NNOD%/$NNOD/g \
    | sed s/%LOGINIT%/$LOGINIT/g \
    | sed s/%RMIENABLE%/$RMIE/g \
    | sed s/%RMIINTERVAL%/$RMII/g \
    | sed s/%USER%/$UOUT/g \
    | sed s/%PREPEND%/"$PREPEND"/g \
    >config.yaml
  if [ ! -s config.yaml ]; then
    err_echo Unable to build config.yaml
    ls -ls config.yaml
    info_echo "         PIPE=$PIPE"
    info_echo "   BUTLER_DIR=$BUTLER_DIR"
    info_echo "   DRP_INGDIR=$DRP_INGDIR"
    info_echo "  PIPEVALSPEC=$PIPEVALSPEC"
    info_echo "        QUERY=$QUERY"
    info_echo "          MEM=$MEM"
    info_echo "         NNOD=$NNOD"
    info_echo "      LOGINIT=$LOGINIT"
    info_echo "    RMIENABLE=$RMIENABLE"
    info_echo "  RMIINTERVAL=$RMIINTERVAL"
    info_echo "         USER=$USER"
    info_echo "      PREPEND=\"$PREPEND\""
    exit 1
  fi
  
  echo "" >>config.yaml
  echo "parsl_config:" >>config.yaml
  echo "  retries: 1" >>config.yaml
  if [ $PMONDT = false -o $PMONDT -le 0 ]; then
    echo "  monitoring: false" >>config.yaml
  else
    echo "  monitoring_interval: $PMONDT" >>config.yaml
  fi

  #  monitoring: parsl.monitoring.monitoring.MonitoringHub(
  #           hub_address=parsl.addresses.address_by_hostname(),
  #           hub_port=55055,
  #           monitoring_debug=False,
  #           resource_monitoring_enabled=,
  #           resource_monitoring_interval=,
  #       ),
  #  initialize_logging:
  
  if [ ${EXEC:0:3} = wq: ]; then
    MEGB=${EXEC:3}
    # Make sure the memory limit is not blank and is numeric.
    if ! [ "$MEGB" -eq "$MEGB" ] 2>/dev/null; then
      echo Assigning default work_queue memory.
      MEGB=2
    fi
    echo "  executor: WorkQueue" >>config.yaml
    echo "  provider: Local" >>config.yaml
    echo "  port: 0" >>config.yaml
    echo "  nodes_per_block: 1" >>config.yaml
    echo "  worker_options: \"--memory=${MEGB}000\"" >>config.yaml
  elif [ ${EXEC:0:3} = tp: ]; then
    NTHR=${EXEC:3}
    if [ -z "$NTHR" ]; then NTHR=1; fi
    echo "  executor: ThreadPool" >>config.yaml
    echo "  max_threads: $NTHR" >>config.yaml
  else
    err_echo Unknown executor: $EXEC
    exit 1
  fi
  info_echo Executor: $EXEC
fi

G3WF_BRANCH=
#if [ $IVER -ge 2331 ]; then
#  G3WF_BRANCH=u/jchiang/w_2023_32_qbb_changes
#fi

if [[ -n $WFARGS ]]; then
  info_echo Creating run script.
  if [ -z "$CSRC" ]; then
  CSRCARG=
    err_echo "Code source must be provided."
    exit 14
  elif [ ${CSRC:0:7} = shifter ]; then
    COM=g3wf-run-shifter
    CSRCOPT=${CSRC:8}
    if [ -n "$CSRCOPT" ]; then
      CSRCARG="-v $CSRCOPT"
    fi
    if [ $REBUILD = true ]; then
      err_echo "Ignoring rebuild directive for shifter."
    fi
  elif [ $CSRC = cvmfs -o ${CSRC:0:6} = cvmfs: ]; then
    COM=g3wf-run-cvmfs
    CSRCOPT=${CSRC:6}
    if [ -n "$CSRCOPT" ]; then
      CSRCARG="-v $CSRCOPT"
    fi
    if [ $REBUILD = true ]; then
      CSRCARG="$CSRCARG -r"
    fi
  else
    err_echo Invalid source: $CSRC.
    exit 15
  fi
  info_echo Code source: $CSRC
  COM="${TMAX:+timeout $TMAX }$COM $CSRCARG $LVEROPTS ./run"
  # Create the run script.
  # It installs desc-gen3-prod and then runs the pipeline.
  RFIL=./setup.sh
  rm -f $RFIL
  echo "# This script was generated $(date) on $(hostname)" >>$RFIL
  echo 'export PYTHONPATH' >>$RFIL
  if [ $CSRC = shifter ]; then
    echo "source /opt/lsst/software/stack/setup.sh" >>$RFIL
    echo "setup lsst_distrib" >>$RFIL
  fi
  echo "if [ ! -r ./local/desc-wfmon ]; then" >>$RFIL
  echo "  echo setup: Installing desc-wfmon." >>$RFIL
  echo '  mkdir repos && cd repos && git clone https://github.com/LSSTDESC/desc-wfmon && cd ..' >>$RFIL
  echo "  pip install -t local/desc-wfmon repos/desc-wfmon" >>$RFIL
  echo "fi" >>$RFIL
  echo 'PATH=./local/desc-wfmon/bin:$PATH' >>$RFIL
  echo 'PYTHONPATH=./local/desc-wfmon:$PYTHONPATH' >>$RFIL
  echo 'IPYDIR=./repos/desc-wfmon/ipynb' >>$RFIL
  echo 'cp $IPYDIR/monexp.ipynb .' >>$RFIL
  echo 'cp $IPYDIR/perfstat.ipynb .' >>$RFIL
  echo 'cp $IPYDIR/monexp.py .' >>$RFIL
  echo 'basename $(pwd) | sed "s/job0*/Job /g" > README.txt' >>$RFIL
  echo "if [ ! -r ./local/desc-gen3-prod ]; then" >>$RFIL
  echo "  echo setup: Installing desc-gen3-prod." >>$RFIL
  echo "  pip install -t local/desc-gen3-prod git+https://github.com/LSSTDESC/desc-gen3-prod" >>$RFIL
  echo "fi" >>$RFIL
  echo 'PATH=./local/desc-gen3-prod/bin:$PATH' >>$RFIL
  echo 'PYTHONPATH=./local/desc-gen3-prod:$PYTHONPATH' >>$RFIL
  echo 'echo setup: Running with desc-gen3-prod version $(desc-gen3-prod-version)' >>$RFIL
  echo 'echo setup: Running with desc-wfmon version $(desc-wfmon-parsltest -v)' >>$RFIL
  echo 'SRC=$HOME/descprod/repos/gen3_workflow' >>$RFIL
  echo 'if [ -r $SRC ]; then' >>$RFIL
  echo '  echo setup: WARNING: Using local copy of gen3_workflow: $SRC' >>$RFIL
  echo '  cp -r $SRC .' >>$RFIL
  echo 'else' >>$RFIL
  echo '  SRC=https://github.com/LSSTDESC/gen3_workflow.git' >>$RFIL
  echo '  echo setup: Using github gen3_workflow: $SRC' >>$RFIL
  echo '  git clone $SRC' >>$RFIL
  echo 'fi' >>$RFIL
  if [ -n "$G3WF_BRANCH" ]; then
    echo 'echo setup: Using gen3_workflow branch '$G3WF_BRANCH >>$RFIL
    echo '(cd gen3_workflow; git checkout '$G3WF_BRANCH')' >>$RFIL
  fi
  echo 'setup -r gen3_workflow -j' >>$RFIL
  echo 'pip freeze >versions.log' >>$RFIL
  echo 'export PS1="g3wfpipe> "' >>$RFIL
  RFIL=./run
  rm -f $RFIL
  echo "#!/bin/bash" >> $RFIL
  echo "# This script was generated $(date) on $(hostname)" >>$RFIL
  echo "# and was run with the command $COM" >>$RFIL
  echo 'source ./setup.sh' >>$RFIL
  echo 'echo run: Running pipeline.' >>$RFIL
  echo "g3wfpipe-run $WFARGS" >>$RFIL
  chmod +x ./run
  info_echo Starting run script with steps $WFARGS.
  $COM
  RSTAT=$?
else
  info_echo No actions specified.
  RSTAT=0
fi

if [ $RSTAT != 0 ]; then exit $RSTAT; fi

if [ -n "$BPROC" ]; then
  info_echo Creating batch job for stage 2.
  JOBID=$(grep '"id"' config.json | sed 's/.*: //' | sed 's/,.*//')
  if [ -z "$JOBID" ]; then
    err_echo Unable to extract job ID.
    exit 17
  fi
  CFG2=job:$JOBID-proc
  HFG2=pmbs-$BPOPTS
  if [ -n "$TMAX2" ]; then
    HFG2=$HFG2,tmax:$TMAX2
  fi
  if [ -n "$BPJOB" ]; then
    LOG=stage2.log
    if ! descprod-add-job -p $JOBID g3wfpipe $CFG2 $HFG2 >$LOG; then
      err_echo "Unable to create job for stage 2."
      exit 18
    fi
    cat $LOG
    JOBID2=$(grep " id:" $LOG | sed 's/.*id: //')
    info_echo Starting job $JOBID2 for stage 2.
    descprod-start-job $JOBID2
  else
    mkdir stage2
    cd stage2
    echo '{' >config.json
    echo '  "id": '$JOBID, >>config.json
    echo '  "jobtype": "g3wfpipe",' >>config.json
    echo '  "config": "'$CFG2'",' >>config.json
    echo '  "howfig": "'$HFG2'"' >>config.json
    echo '}' >>config.json
    if ! runapp-pmbs; then
      err_echo "Unable to submit batch job for stage 2."
      exit 21
    fi
    cd ..
  fi
fi

if [ -n "$WFARGS2" ]; then
  err_echo Create finalization job is not yet implemented.
  exit 77
fi

exit 0
