#!/bin/bash

# runapp-g3wfpipe
#
# David Adams
# May 2023
# Run a DESC gen3 pipline processing job.
# This script is called without two arguments config and howfig, each of which is split
# '-' as a separator to obtain the configuration fields NAM:VAL or NAM:VAL1:VAL2
# Config fields:
#   pipe: Specifies the processing tasks. See PIPEVAL below. E.g. isr, ccd, drp, ...
#   wYYWW: Use LSST release w_20YY_WW
#   The query for which data to process is and of one or more of the following:
#     visit: Which visits to process. Either VAL or [VAL1,VAL2]
#     tract: Which tracts to process. Either VAL or [VAL1,VAL2]
#     patch: Which patchess to process. Either VAL or [VAL1,VAL2]
# Howfig fields:
#   exec: Parsl executor wq, ht or tp. Also wqMM to run WorkQueue with MM GB memor=y limit.
#   code source: cvmfs of shifter
#   batch time limit: btTT where TT is time limit in minutes
#   memory limit [GB]: memMMM

if [[ -z $1 || $1 = -h ]]; then
  echo Usage: $0 CFG [HFG]
  echo CFG = CF1-CF2-... where CFi is any of
  echo "  pipe:PIPELINE, e.g. pipe:isr"
  echo "  visit:NNN: Visit for query e.g. visit:123456"
  echo "  tract:NNN: Tract for query e.g. tract:4248"
  echo "  patch:NNN: Patch for query e.g. patch:85"
  echo "  wYYWW: Use LSSST release w_20YY_WW"
  echo "  init: Initialize (create DAG)."
  echo "  proc: Process data."
  echo "  finalize: Finalize (register output data products)."
  echo "  status: Display processing status."
  echo HFG = HF1-HF2-... where HFi is any of
  echo "  exec:XX where XX = wq, tp or wqMM"
  echo "  cvmfs: Code taken from cvmfs"
  echo "  shifter: Code taken from shifter"
  echo "  tmax: Timeout in sec"
  exit 1
fi

DBG=0
SFIL=current-status.txt

err_echo() {
  MSG="$*"
  echo "$MSG" >$SFIL
  echo "ERROR: $MSG" >&2
}

info_echo() {
  MSG="$*"
  echo "$MSG" >$SFIL
  echo "INFO: $MSG" >&2
}

dbg_echo() {
  if [ $DBG -gt 0 ]; then
    echo $*
  fi
}

decode_query() {
  VALS=(${1//:/ })
  NAM=${VALS[0]}
  VAL1=${VALS[1]}
  VAL2=${VALS[2]}
  VAL3=${VALS[3]}
  if [ -z "$VAL1" -o -n "$VAL3" ]; then
    err_echo Invalid query field: $1
    exit 2
  fi
  if [ -n "$VAL2" ]; then
    echo "$NAM in ($VAL1..$VAL2)"
  else
    echo "$NAM=$VAL1"
  fi
}

CFG=$1
HFG=$2
COPTS=(${CFG//-/ })
HOPTS=(${HFG//-/ })

# We use extended globbing below.
shopt -s extglob

# Parse the config.
PIPE=
QUERY=
LVEROPTS=
CJOB=
DOINIT=false
WFARGS_ARR=()
USER=$(whoami)
DRP_INGDIR=pipelines/_ingredients  # w2321 and later
for OPT in ${COPTS[@]}; do
  dbg_echo Parsing option $OPT
  OPTNAME=$(echo $OPT | cut -d':' -f1)
  OPTARGS=$(echo $OPT | cut -d':' -f2-)
  if [ $OPTNAME == init ]; then
    DOINIT=true
    WFARGS_ARR+=($OPTNAME)
  elif [ $OPTNAME = job ]; then
    CJOB=$OPTARGS
  elif [[ $OPTNAME = proc ]]; then
    WFARGS_ARR+=($OPTNAME)
  elif [ $OPTNAME == finalize ]; then
    WFARGS_ARR+=($OPTNAME)
  elif [ $OPTNAME == qgre ]; then
    WFARGS_ARR+=($OPTNAME)
  elif [ $OPTNAME == status ]; then
    WFARGS_ARR+=($OPTNAME)
  elif [ $OPT == tables ]; then
    WFARGS_ARR+=($OPTNAME)
  elif [ $OPTNAME = pipe ]; then
    if [ -n "$PIPE" ]; then
      err_echo ERROR: Duplicate pipeline specification: $PIPE $OPT
      exit 1
    fi
    PIPE=$OPTARGS
  elif [ $OPTNAME = visit -o $OPTNAME = tract -o $OPTNAME = patch ]; then
    NEWQUERY=$(decode_query $OPT)
    if [ -n "$QUERY" ]; then
      QUERY="$QUERY and $NEWQUERY"
    else
      QUERY="$NEWQUERY"
    fi
  else
    LVER=$(g3wf-convert-lsst-version $OPTNAME)
    if [ -z "$LVER" ]; then
      err_echo ERROR: Invalid config field: $OPT
      exit 3
    fi
    IVER=${OPTNAME:1}
    if [ $IVER -le 2319 ]; then
      DRP_INGDIR=ingredients
    fi
    LVEROPTS=$OPT
  fi
done

CSRC=
NNOD=1
EXEC=none
if [[ -n $CJOB ]]; then
  if [[ -n $QUERYE ]]; then
    echo "ERROR: Query may not be specified for a continuation job."
    exit 1
  fi
  if [[ -n $PIPE ]]; then
    echo "ERROR: Pipeline may not be specified for a continuation job."
    exit 1
  fi
  if [[ -n $LVEROPTS ]]; then
    echo "ERROR: The LSST release may not be specified for a continuation job."
    exit 1
  fi
  info_echo "Connecting to job $CJOB."
  if ! PDIR=$(descprod-get-job $CJOB | grep rundir: | sed 's/ *rundir: //g'); then
    err_echo "Unable to find continuation job $CJOB"
    exit 1
  fi
  if [ -z "$PDIR" ]; then
    err_echo "Unable to find name of run directory for continuation job $CJOB"
    exit 1
  fi
  if [ ! -r "$PDIR" ]; then
    err_echo "For job $CJOB, unable to find continuation run directory $PDIR"
    exit 1
  fi
  # Optional sources.
  for FIL in config.yaml submit runinfo; do
    SRCFIL=$PDIR/$FIL
    if [ -r $SRCFIL ]; then
      echo "Linking source $SRCFIL"
      if ! ln -s $SRCFIL .; then
        err_echo "Unable to link $SRCFIL to $(pwd)"
        exit 1
      fi
    else
      echo "Source not found: $SRCFIL"
    fi
  done
  # Read the old configuration.
  # This should define CON_LVER, CON_PIPEVAL, CON_QUERY, CON_CSRC
  SUPFIL=$PDIR/consetup.sh
  if [ ! -r $SUPFIL ]; then
    echo "ERROR: Unable to find continuation source setup $SUPFIL"
    exit 1
  fi
  source $SUPFIL
  PIPE=$CON_PIPE
  QUERY=$CON_QUERY
  LVEROPTS=$CON_LVEROPTS
  if [[ -z $CSRC ]]; then
    CSRC=$CON_CSRC
  fi
fi


# Parse the howfig.
TMAX=
for OPT in ${HOPTS[@]}; do
  if [ $OPT = shifter ]; then
    CSRC=shifter
  elif [ $OPT = cvmfs ]; then
    CSRC=cvmfs
  elif [ ${OPT:0:3} = wq: ]; then
    EXEC=$OPT
  elif [ ${OPT:0:3} = tp: ]; then
    EXEC=$OPT
  elif [ ${OPT:0:5} = tmax: ]; then
    TMAX=${OPT:5}
    #WFARGS_ARR+=($OPT)
  else
    err_echo Invalid howfig field: $OPT
    exit 13
  fi
done

WFARGS="${WFARGS_ARR[*]}"

# Record the setup for continuation jobs.
info_echo Creating consetup.sh
echo "CON_CSRC=$CSRC" >consetup.sh
echo "CON_LVEROPTS=$LVEROPTS" >>consetup.sh
echo "CON_QUERY=$QUERY" >>consetup.sh
echo "CON_PIPE=$PIPE" >>consetup.sh

if [ $DOINIT = true ]; then
PIPEVAL=
  if [ -z "$PIPE" ]; then
    err_echo "Pipeline must be specified for initialization."
    exit 1
  fi
  if [[ -z $QUERY ]]; then
    err_echo "Query must be provided for initialization."
    exit 1
  fi
  if [ -z "$LVEROPTS" ]; then
    err_echo "LSST release mt be proivided for initialization."
    exit 1
  fi
  if [ $PIPE = drp ]; then
    PIPEVAL=
  elif [ $PIPE = sf ]; then
    PIPEVAL="detection,mergeDetections,deblend,measure,mergeMeasurements,forcedPhotCoadd,writeObjectTable,transformObjectTable,consolidateObjectTable"
  elif [ $PIPE = ccd ]; then
    PIPEVAL="isr,characterizeImage,calibrate"
  else
    PIPEVAL=$PIPE
  fi
  PIPEVALSPEC=
  if [ -n "$PIPEVAL" ]; then PIPEVALSPEC="#$PIPEVAL"; fi
  echo Pipeline: $PIPEVAL
  echo "    Query: $QUERY"
  echo " LSST release opts: $LVEROPTS"
  echo Creating config.yaml.
  g3wfpipe-template \
    | sed s/%PAYLOAD%/$PIPE/g \
    | sed "s#%DRP_INGDIR%#$DRP_INGDIR#g" \
    | sed s/%PIPE%/$PIPEVALSPEC/g \
    | sed s/%QUERY%/"$QUERY"/g \
    | sed s/%MEM%/$MEGB/g \
    | sed s/%NNOD%/$NNOD/g \
    | sed s/%LOGINIT%/$LOGINIT/g \
    | sed s/%RMIENABLE%/$RMIE/g \
    | sed s/%RMIINTERVAL%/$RMII/g \
    | sed s/%USER%/$USER/g \
    >config.yaml
  
  echo "" >>config.yaml
  echo "monitoring: MonitoringHub(hub_address=address_by_hostname()," >>config.yaml
  echo "                   hub_port=None," >>config.yaml
  echo "                   monitoring_debug=False," >>config.yaml
  echo "                   resource_monitoring_interval=60)" >>config.yaml

  echo "" >>config.yaml
  echo "parsl_config:" >>config.yaml
  echo "  retries: 1" >>config.yaml

  #  monitoring: parsl.monitoring.monitoring.MonitoringHub(
  #           hub_address=parsl.addresses.address_by_hostname(),
  #           hub_port=55055,
  #           monitoring_debug=False,
  #           resource_monitoring_enabled=,
  #           resource_monitoring_interval=,
  #       ),
  #  initialize_logging:
  
  if [ ${EXEC:0:3} = wq: ]; then
    MEGB=${EXEC:3}
    # Make sure the memory limit is not blank and is numeric.
    if ! [ "$MEGB" -eq "$MEGB" ] 2>/dev/null; then
      echo Assigning default work_queue memory.
      MEGB=2
    fi
    echo "  executor: WorkQueue" >>config.yaml
    echo "  provider: Local" >>config.yaml
    echo "  port: 0" >>config.yaml
    echo "  nodes_per_block: 1" >>config.yaml
    echo "  worker_options: \"--memory=${MEGB}000\"" >>config.yaml
  elif [ ${EXEC:0:3} = tp: ]; then
    NTHR=${EXEC:3}
    if [ -z "$NTHR" ]; then NTHR=1; fi
    echo "  executor: ThreadPool" >>config.yaml
    echo "  max_threads: $NTHR" >>config.yaml
  else
    err_echo Unknown executor: $EXEC
    exit 1
  fi
  echo Executor: $EXEC
fi

if [[ -n $WFARGS ]]; then
  if [ -z "$CSRC" ]; then
    err_echo "Code source must be provided."
    exit 14
  elif [ $CSRC = shifter ]; then
    COM=g3wf-run-shifter
  elif [ $CSRC = cvmfs ]; then
    COM=g3wf-run-cvmfs
  else
    err_echo Invalid source: $CSRC.
    exit 15
  fi
  echo Code source: $CSRC
  COM="${TMAX:+timeout $TMAX }$COM $LVEROPTS ./run"
  # Create the run script.
  # It installs desc-gen3-prod and then runs the query.
  RFIL=./run
  echo "#!/bin/bash" > $RFIL
  echo 'export PYTHONPATH' >>$RFIL
  if [ $CSRC = shifter ]; then
    echo "source /opt/lsst/software/stack/setup.sh" >>$RFIL
    echo "setup lsst_distrib" >>$RFIL
    echo "pip install -t local/desc-wfmon git+https://github.com/LSSTDESC/desc-wfmon" >>$RFIL
    echo 'PATH=./local/desc-wfmon/bin:$PATH' >>$RFIL
    echo 'PYTHONPATH=./local/desc-wfmon:$PYTHONPATH' >>$RFIL
  fi
  echo "pip install -t local/desc-gen3-prod git+https://github.com/LSSTDESC/desc-gen3-prod" >>$RFIL
  echo 'PATH=./local/desc-gen3-prod/bin:$PATH' >>$RFIL
  echo 'PYTHONPATH=./local/desc-gen3-prod:$PYTHONPATH' >>$RFIL
  echo 'echo Running with desc-gen3-prod version $(desc-gen3-prod-version)' >>$RFIL
  echo 'echo Running with desc-wfmon version $(desc-wfmon-parsltest -v)' >>$RFIL
  echo 'git clone https://github.com/LSSTDESC/gen3_workflow.git' >>$RFIL
  echo 'setup -r gen3_workflow -j' >>$RFIL
  echo 'pip freeze >versions.log' >>$RFIL
  echo "g3wfpipe-run $WFARGS" >>$RFIL
  chmod +x ./run
  info_echo Steps: $WFARGS
  $COM
  RSTAT=$?
else
  info_echo No actions specified.
  RSTAT=0
fi

exit $RSTAT
