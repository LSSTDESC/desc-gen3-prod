#!/usr/bin/env python3

import time
t0 = time.time()

def myprint(msg):
    dtim = time.time() - t0
    tmsg = f"{dtim:6.1f}: {msg}"
    print(msg)
    with open('current-status.txt', 'w') as ofil:
        ofil.write(f"{tmsg}\n")

import sys
myname = sys.argv[0]
args = list(sys.argv[1:])
rc = -1
repo = '/global/cfs/cdirs/lsst/production/gen3/DC2/Run2.2i/repo'
dtyp = 'raw'
while len(args):
    opt = args.pop(0)
    if opt.startswith('-'):
        val = opt[1:]
        if val == 'h':
            rc = 0
        elif val == 'r':
            repo = args.pop(0)
            print(f"{myname}: Using repository {repo}")
            continue
        elif val == 'd':
            dtyp = args.pop(0)
            print(f"{myname}: Using dat type {dtyp}")
            continue
        else:
            print(f"{myname}: Invalid option {opt}")
            rc = 1
    if opt == 'help':
        rc = 0
    break
            
if rc >= 0:
    print(f"Usage: {myname}: [-h] [-r REPO] [-d DATATYPE] OPT")
    print(f"  OPT = help XXX: Python help on XXX")
    print(f"        dim: Show all dimension names")
    print(f"        query QRY: Return # refs matching QRY")
    exit(rc)

myprint(f"{time.time()-t0:6.1f}: Importing the Butler.")
from lsst.daf.butler import Butler

col = 'LSSTCam-imSim/raw/all'
myprint(f"{myname}: Creating Butler at {repo}")
butler = Butler(repo, collections=[col])
reg = butler.registry
if opt == 'test':
    args = ['visit=231', '10']
    opt = 'query'
myprint(f"Executing {opt}")
if opt == 'dim':
    ndim = 0
    for dim in reg.dimensions.getStaticDimensions():
        print(f"  {dim}")
        ndim = ndim + 1
    msgend = f"Found {ndim} dimensions."
elif opt == 'query':
    '''Process a query, e.g. "visit=231"'''
    query = args.pop(0)
    if len(args):
        maxref = int(args.pop())
    else:
        maxref = 4
    myprint(f"Fetching refs for data type {dtyp} and query {query}.")
    rawrefs = reg.queryDatasets(dtyp, where=query)
    myprint(f"Listing refs.")
    lstrefs = list(rawrefs)
    myprint(f"Filtering {len(lstrefs)} refs.")
    refs = set(lstrefs)
    nref = len(refs)
    nsref = min(maxref,nref) if maxref >= 0 else nref
    myprint(f"Displaying {nsref} of {nref} refs for \"{query}\":")
    iref = 0
    for ref in refs:
        iref += 1
        if iref > nsref: break
        myprint(ref.dataId.full)
    msgend = f"Found {nref} matching datasets."
else:
    msgend = f"ERROR: Invalid option: {opt}"
myprint(msgend)
